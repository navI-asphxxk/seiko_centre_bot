import json
import telebot
from telebot import types

from menues import main_menu, feedback_menu, price_menu, level_menu, get_level_and_back_buttons, tariff_menu
from config import BOT_TOKEN
from textmsgs import about_school, faq_text, get_free_less_text
from textmsgs import tariff_online_text, feedback_text, welcome, certificat_text, network_text, price_text
from textmsgs import online_course_text, offline_course_text, individual_text, marafon_text, tariff_text

import random


bot = telebot.TeleBot(BOT_TOKEN)


class CheckText:
    def __init__(self, message):
        self.text = message.text
        self.chat_id = message.chat.id

    # count - –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, callback_string - –∫–∞—Ç–∞–ª–æ–≥ —Å —Ñ–æ—Ç–æ
    def text_pages(self, callback_string, count):
        page = 1
        markup = types.InlineKeyboardMarkup()

        # callback –≤ —Ñ–æ—Ä–º–∞—Ç–µ json
        j_data_up = {"method": callback_string,
                     "NumberPage": page + 1,
                     "CountPage": count
                     }

        markup.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='unseen'))
        markup.add(types.InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                   types.InlineKeyboardButton(text=f'‚ñ∂Ô∏è',
                                              callback_data=json.dumps(j_data_up)))

        bot.send_photo(self.chat_id, open(f'pictures/aboutStudy/{page}.jpg', 'rb'),
                       caption=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {count}', reply_markup=markup)

    def check_school_text(self):
        if self.text == 'üéì–£–∑–Ω–∞—Ç—å –ø—Ä–æ –æ–±—É—á–µ–Ω–∏–µ –∏ —à–∫–æ–ª—É SEIKO':
            markup = types.InlineKeyboardMarkup(row_width=1)
            b1 = types.InlineKeyboardButton("üíæ–°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –æ —à–∫–æ–ª–µ", callback_data="presentation")
            b2 = types.InlineKeyboardButton("üí¨–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url='https://t.me/yana_seiko_centre')
            b3 = types.InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="back")
            markup.add(b1, b2, b3)

            bot.send_message(self.chat_id, text=about_school, parse_mode='MarkdownV2',
                             reply_markup=markup)
            #bot.send_document(self.chat_id, open("description.pdf", "rb"))

    def check_faq_text(self):
        if self.text == 'Ô∏è‚ùìFAQ':
            bot.send_message(self.chat_id, text=faq_text, parse_mode='MarkdownV2',
                             reply_markup=feedback_menu())

    def check_tariff_text(self):
        if self.text == 'üíé–¢–∞—Ä–∏—Ñ—ã':
            bot.send_message(self.chat_id, text=tariff_text, parse_mode='MarkdownV2',
                             reply_markup=tariff_menu())

    def check_price_text(self):
        if self.text == 'üí∞–¶–µ–Ω—ã':
            bot.send_photo(self.chat_id,open('pictures/price_info.jpg', 'rb'),
                           caption=price_text, parse_mode="MarkdownV2", reply_markup=price_menu())

    def check_get_free_less(self):
        if self.text == 'üìÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ':
            bot.send_message(self.chat_id, text=get_free_less_text, parse_mode='html',
                             reply_markup=get_level_and_back_buttons())

    def check_feedback_text(self):
        if self.text == 'üì¢–°–≤—è–∑–∞—Ç—å—Å—è':
            bot.send_message(self.chat_id, text=feedback_text, parse_mode='MarkdownV2',
                             reply_markup=get_level_and_back_buttons())

    def check_certificat_text(self):
        if self.text == 'üìù–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ —Å–ø—Ä–∞–≤–∫–∏ –æ —á–∞—Å–∞—Ö':
            bot.send_photo(self.chat_id, open("pictures/150hourCertificate.JPG", "rb"),
                           caption=certificat_text, parse_mode='MarkdownV2',
                           reply_markup=main_menu())

    def check_network_text(self):
        if self.text == 'üîó–°–æ—Ü. —Å–µ—Ç–∏':
            bot.send_message(self.chat_id, text=network_text, parse_mode='html',
                             reply_markup=main_menu())

def check_text(message):
    m = CheckText(message)
    m.check_school_text()
    m.check_faq_text()
    m.check_price_text()
    m.check_get_free_less()
    m.check_feedback_text()
    m.check_certificat_text()
    m.check_network_text()
    m.check_tariff_text()


